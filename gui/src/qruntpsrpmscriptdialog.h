/* * GigaMesh - The GigaMesh Software Framework is a modular software for display,
 * editing and visualization of 3D-data typically acquired with structured light or
 * structure from motion.
 * Copyright (C) 2009-2020 Hubert Mara
 *
 * This file is part of GigaMesh.
 *
 * GigaMesh is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GigaMesh is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GigaMesh.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef QRUNTPSRPMSCRIPTDIALOG_H
#define QRUNTPSRPMSCRIPTDIALOG_H

#include <QString>
#include <QDialog>

#include "meshGL/meshGL.h"

namespace Ui
{
	class QRunTpsRpmScriptDialog;
}

class QRunTpsRpmScriptDialog final : public QDialog
{
	Q_OBJECT

public:


	//! \brief				In addition to member variable initialization,
	//!						this constructor also sets up the QDialog UI,
	//!						and connects its UI signals to the corresponding
	//!						functions of this class
	//! \param parent		A pointer to the parent QWidget
	//! \param meshGLPtr	A pointer to the currently active MeshGL object,
	//!						used to update the mesh after import of the
	//!						coordinates from the CSV file generated by the
	//!						TPS-RPM script
	explicit QRunTpsRpmScriptDialog(QWidget* parent = nullptr,
	                                        MeshGL* meshGLPtr = nullptr);
	 ~QRunTpsRpmScriptDialog();

private slots:

	//! \brief		Function called when the origin
	//!				coordinates file selection PushButton
	//!				is released
	//! \details	Function called when the origin
	//!				coordinates file selection PushButton
	//!				is released. This file should contain
	//!				the coordinates of the origin mesh in
	//!				CSV format, as generated by the mesh
	//!				coordinate CSV export functionality
	//!				privided under
	//!				File->Export All Vertices As CSV File.
	//!				Triggers a file dialog in which the
	//!				origin coordinates file is selected
	//!				by the user. If the file exists, the
	//!				member variable
	//!				m_meshCoordinatesOriginFileName will
	//!				be set to the path and filename of the
	//!				selected file.
	void meshCoordinatesOriginFileSelectionPushButtonReleased();

	//! \brief		Function called when the origin
	//!				positions file selection PushButton
	//!				is released
	//! \details	Function called when the origin
	//!				primitive positions file selection
	//!				PushButton is released. This file
	//!				should contain the coordinates of the
	//!				primitives of the origin mesh used in
	//!				the TPS-RPM transformation in CSV
	//!				format, as generated by the primitive
	//!				coordinates export functionality
	//!				provided under
	//!				File->Export Coordinates of selected
	//!				Primitives As CSV File.
	//!				Triggers a file dialog in which the
	//!				origin primitive positions file is
	//!				selected by the user. If the file
	//!				exists, the member variable
	//!				m_primitiveCoordinatesOriginFileName
	//!				will be set to the path and filename
	//!				of the selected file.
	void primitiveCoordinatesOriginFileSelectionPushButtonReleased();
	
	//! \brief		Function called when the target
	//!				positions file selection PushButton
	//!				is released
	//! \details	Function called when the target
	//!				positions file selection PushButton
	//!				is released. This file should contain
	//!				the coordinates of the primitives of
	//!				the target mesh used in the TPS-RPM
	//!				transformation in CSV format, as
	//!				generated by the primitive coordinates
	//!				export functionality provided under
	//!				File->Export Coordinates of selected
	//!				Primitives As CSV File.
	//!				Triggers a file dialog in which the
	//!				target primitive positions file is
	//!				selected by the user. If the file
	//!				exists, the member variable
	//!				m_primitiveCoordinatesTargetFileName
	//!				will be set to the path and filename
	//!				of the selected file.
	void primitiveCoordinatesTargetFileSelectionPushButtonReleased();
	
	//! \brief		Function called when the output
	//!				mesh data PushButton is released
	//! \details	Function called when the output
	//!				mesh data PushButton is released.
	//!				After the TPS-RPM transformation is
	//!				successfully performed, this function
	//!				will contain the coordinates and
	//!				function values generated by the
	//!				TPS-RPM algorithm in CSV format, as
	//!				is supported for import into the
	//!				current mesh (which has to have the
	//!				same vertex count as the origin
	//!				mesh used for the transformation)
	//!				provided under
	//!				File->Import Mesh Coordinates From
	//!				CSV File.
	//!				Triggers a file dialog in which the
	//!				mesh data output file is
	//!				selected by the user. If the file
	//!				name QString is not empty, the member
	//!				variable m_meshDataOutputFileName will
	//!				be set to the path and filename of the
	//!				selected file.
	void meshDataOutputFileSelectionPushButtonReleased();


	//! \brief					Function called when the state of the CheckBox,
	//!							determing wether the generated mesh data will
	//!							be imported into the current mesh after
	//!							computation of the TPS-RPM algorithm has
	//!							finished, changes
	//! \details				Function called when the state of the CheckBox,
	//!							determing wether the generated mesh data will
	//!							be imported into the current mesh after
	//!							computation of the TPS-RPM algorithm has
	//!							finished, changes.
	//!							If the new state is Qt::CheckState::Checked,
	//!							the member variable
	//!							m_importGeneratedMeshDataToCurrentMesh will be
	//!							set to true, otherwise it will be set to false.
	//! \param newCheckState	The new state of the CheckBox
	void importGeneratedVerticesToCurrentMeshCheckBoxChanged(int newCheckState);
	
	//!
	//! \brief
	void applyTpsRpmTransformation();

private:

	//! \brief			Function that checks if all the TextEdits
	//!					are contain valid data by checking the
	//!					corresponding bool member variables
	//! \details		This function checks if all the TextEdits
	//!					are contain valid data by checking the
	//!					corresponding bool member variables. If they
	//!					are, the Apply Button is enabled, otherwise
	//!					it is disabled.
	void checkInput();

	Ui::QRunTpsRpmScriptDialog* m_qRunTpsRpmScriptDialog =
	                                                    nullptr;
	
	MeshGL* m_meshGLPtr = nullptr;
	
	QString m_lastOpenedFileDirectory;

	QString m_meshCoordinatesOriginFileName;
	QString m_primitiveCoordinatesOriginFileName;
	QString m_primitiveCoordinatesTargetFileName;
	QString m_meshDataOutputFileName;

	bool m_importGeneratedMeshDataToCurrentMesh = false;

	bool m_meshCoordinatesOriginFileNameValid = false;
	bool m_primitiveCoordinatesOriginFileNameValid = false;
	bool m_primitiveCoordinatesTargetFileNameValid = false;
	bool m_meshDataOutputFileNameValid = false;


	// QWidget interface
	protected:
	virtual void changeEvent(QEvent* event) override;
};

//! \brief				Convenience function that constructs an
//!						QRunTpsRpmScriptDialog object and calls its
//!						exec() function to show the TPS-RPM dialog
//! \param parent		A pointer to the parent QWidget of the
//!						QRunTpsRpmScriptDialog object to be constructed
//! \param meshGLPtr	A pointer to the currently active MeshGL object,
//!						used to update the mesh after import of the
//!						coordinates from the CSV file generated by the
//!						TPS-RPM script
void showRunTpsRpmScriptDialog(QWidget* parent, MeshGL* meshGLPtr);

#endif // QRUNTPSRPMSCRIPTDIALOG_H
